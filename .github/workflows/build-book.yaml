name: build-book

on:
  workflow_call:
    inputs:
      environment_name:
        description: 'Name of conda environment to activate'
        required: false
        default: 'cookbook-dev'
        type: string
      environment_file:
        description: 'Name of conda environment file'
        required: false
        default: 'environment.yml'
        type: string
      path_to_notebooks:
        description: 'Location of the JupyterBook source relative to repo root'
        required: false
        default: './'
        type: string
      use_cached_environment:
        description: 'Flag for whether we should attempt to retrieve a previously cached environment.'
        required: false
        default: 'true'
        type: string  # had a lot of trouble with boolean types, see https://github.com/actions/runner/issues/1483${{ github.repository }}
      artifact_name:
        description: 'The name to assign to the built book artifact.'
        required: false
        default: 'book-zip'
        type: string
      build_command:
        description: 'The linux command to build the book or site.'
        required: false
        default: 'jupyter-book build .'
        type: string
      output_path:
        description: 'Path to the built html content relative to `path_to_notebooks`'
        required: false
        default: '_build/html'
        type: string

    secrets:
      ARM_USERNAME:
        description: 'Username for the ARM Data Discovery portal (https://adc.arm.gov/armlive/)'
        required: false
      ARM_PASSWORD:
        description: 'Password for the ARM Data Discovery portal (https://adc.arm.gov/armlive/)'
        required: false

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - uses: actions/checkout@v3

      - name: Check for config file
        id: check_config
        uses: andstor/file-existence-action@v3
        with:
          files: "${{ inputs.path_to_notebooks }}/_config.yml"
      
      - name: Parse config file
        id: parse_config
        if: steps.check_config.outputs.files_exists == 'true'
        uses: CumulusDS/get-yaml-paths-action@v1.0.2
        with:
          file: ${{ inputs.path_to_notebooks }}/_config.yml
          execute_notebooks: execute.execute_notebooks
          binderhub_url: sphinx.config.html_theme_options.launch_buttons.binderhub_url

      - name: Echo values from config file
        if: steps.check_config.outputs.files_exists == 'true'
        run: |
          echo ${{ steps.parse_config.outputs.execute_notebooks }}
          echo ${{ steps.parse_config.outputs.binderhub_url }}

      - name: Test for environment change
        id: env_change
        uses: tj-actions/changed-files@v36
        with:
          files: ${{ inputs.environment_file }}

      - name: Echo environment change test result
        run: |
          echo '(DEBUG) The value of steps.env_change.outputs.any_changed is:'
          echo ${{ steps.env_change.outputs.any_changed }}

      - name: Setup Mambaforge
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-variant: Mambaforge
          miniforge-version: latest
          python-version: "3.10"  # binderbot is failing with python 3.11
          activate-environment: ${{ inputs.environment_name }}
          use-mamba: true

      - name: Set cache date
        if: inputs.use_cached_environment == 'true'
        run: echo "DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV

      - uses: actions/cache@v4
        if: inputs.use_cached_environment == 'true'
        with:
          path: /usr/share/miniconda3/envs/${{ inputs.environment_name }}
          # This should create a key that looks like 'linux-64-conda-environment.yml-[HASH]-_config.yml-[HASH]-DATE'
          # Logic inspired by https://dev.to/epassaro/caching-anaconda-environments-on-github-actions-2d08
          key: ${{ format('linux-64-conda-{0}-{1}-{2}-{3}-{4}', inputs.environment_file, hashFiles(format('{0}', inputs.environment_file)), '_config.yml', hashFiles(format('{0}', '_config.yml')), env.DATE )}}
        id: cache
      
      - name: Create book build environment
        if: |
          (inputs.use_cached_environment != 'true'
          || steps.cache.outputs.cache-hit != 'true')
          && steps.parse_config.outputs.execute_notebooks == 'binder'
        run: |
          mamba install -c conda-forge jupyter-book pip
          pip install sphinx-pythia-theme
          pip install git+https://github.com/pangeo-gallery/binderbot.git

      - name: Update execution environment
        if: |
          (inputs.use_cached_environment != 'true'
          || steps.cache.outputs.cache-hit != 'true'
          || steps.env_change.outputs.any_changed == 'true')
          && steps.parse_config.outputs.execute_notebooks != 'binder'
        run: mamba env update -n ${{ inputs.environment_name }} -f ${{ inputs.environment_file }}

      - name: Get paths to notebook files
        if: |
          steps.parse_config.outputs.execute_notebooks == 'binder'
        # This will find ALL *.ipynb files in the repo
        #  It would be better to cross-check this against the _toc.yml file
        #  to avoid unneccesary execution of notebooks that aren't included in the book
        shell: python
        run: |
          import glob
          notebooks = glob.glob('**/*.ipynb', recursive=True)
          outfile = open("notebook_paths", "w")
          for path in notebooks:
              outfile.write(path + ' ')
          outfile.close() # Writing these out to a file because I can't figure out how to set an environment variable from a python script 
      - name: Execute notebooks via binderbot using existing image
        if: |
          ( steps.parse_config.outputs.execute_notebooks == 'binder'
          && steps.env_change.outputs.any_changed != 'true' )
        env:
          ARM_USERNAME: ${{ secrets.ARM_USERNAME }}
          ARM_PASSWORD: ${{ secrets.ARM_PASSWORD }}
          SECRETS_VARS: ${{ toJson(secrets) }}
        run: |
          NOTEBOOKS=$(cat notebook_paths)
          echo 'Retrieved binder_url: ${{ steps.parse_config.outputs.binderhub_url }}'
          echo "We will now execute these notebooks: $NOTEBOOKS"
          echo "using the existing binder image from the main branch"
          SECRET_VAR_LIST=$(echo $SECRET_VARS | jq -r 'with_entries(.key |= "--pass-env-var " + . + " ") | keys | [ .[] | tostring ] | @csv') # Extract the keys of the secret environment variables, and create a list of arguments separated by commas (CSV)
          SECRET_VARS_ARGS=$(echo "${SECRET_VAR_LIST//,}" | tr -d '"') # Remove the commas and merge the list of strings into a single cohesive string to be passed to the binder cli
          python -m binderbot.cli --binder-url ${{ steps.parse_config.outputs.binderhub_url }} --repo ${{ github.repository }} --ref main $NOTEBOOKS $SECRET_VARS_ARGS

      - name: Execute notebooks via binderbot using new image with latest environment
        if: |
            ( steps.parse_config.outputs.execute_notebooks == 'binder'
            && steps.env_change.outputs.any_changed == 'true' )
        env:
          ARM_USERNAME: ${{ secrets.ARM_USERNAME }}
          ARM_PASSWORD: ${{ secrets.ARM_PASSWORD }}
        run: |
          NOTEBOOKS=$(cat notebook_paths)
          echo 'Retrieved binder_url: ${{ steps.parse_config.outputs.binderhub_url }}'
          echo "We will now execute these notebooks: $NOTEBOOKS"
          echo "using the updated environment file in this branch to build a new image"
          python -m binderbot.cli --binder-url ${{ steps.parse_config.outputs.binderhub_url }} --repo ${{ github.repository }} --ref ${{ github.ref }} $NOTEBOOKS

      - name: Disable notebook execution during jupyterbook build
        if: |
          steps.parse_config.outputs.execute_notebooks == 'binder'
        shell: python
        run: |
          import yaml
          with open('${{ inputs.path_to_notebooks }}/_config.yml') as f:
            data = yaml.safe_load(f)
          data['execute']['execute_notebooks'] = 'off'
          with open('${{ inputs.path_to_notebooks }}/_config.yml', 'w') as f:
            yaml.dump(data, f)

      - name: Build the book
        # Assumption is that if execute_notebooks != 'binder' then the _config.yml file must be set to execute notebooks during build
        run: |
          cd ${{ inputs.path_to_notebooks }}
          ${{ inputs.build_command }}

      - name: Zip the book
        run: |
          set -x
          set -e
          if [ -f book.zip ]; then
              rm -rf book.zip
          fi
          zip -r book.zip ${{ inputs.path_to_notebooks }}/ ${{ inputs.output_path }}

      - name: Upload zipped book artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.artifact_name }}
          path: ./book.zip
